import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.*;
import java.io.*;
import java.math.*;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

enum Action {
    ATK,
    PAT,
    WAIT;

}


class Entity {
    public int id;
    public int type; // 0=monster, 1=your hero, 2=opponent hero
    public int x; // Position of this entity
    public int y;
    public int shieldLife; // Ignore for this league; Count down until shield spell fades
    public int isControlled; // Ignore for this league; Equals 1 when this entity is under a control spell
    public int health; // Remaining health of this monster
    public int vx; // Trajectory of this monster
    public int vy;
    public int nearBase; // 0=monster with no target yet, 1=monster targeting a base
    public int threatFor; // Given this monster's trajectory, is it a threat to 1=your base, 2=your opponent's base, 0=neither
    public int lastSeenTurn;
    public boolean isTargeted = false;

    public Entity(int id) {
        this.id = id;
    }

    public boolean isMonster() {
        return type == 0;
    }

    public boolean isMyHero() {
        return type == 1;
    }

    public boolean isOpponentHero() {
        return type == 2;
    }


    public boolean isAlive(int currentTurn) {
        return lastSeenTurn == currentTurn;
    }

    public boolean isGoingToBase() {
        return nearBase == 1 && threatFor == 1;
    }

    public double getSpeed() {
        return 800;
    }

    public Point2D getPosition() {
        return new Point2D(x, y);
    }

    public Point2D getSpeedVector() {
        return new Point2D(vx, vy);
    }

    public boolean isBaseThreat(GameMap map) {
        double a = vy/vx;
        double b = y - a * x;
        if (map.baseX == 0) {
            double y0 = b;
            double x0 = -b / a;
            return (y0 > 0 && y0 < 5000) || (x0 > 0 && x0 < 5000);
        } else {
            double yMax = a * map.baseX + b;
            double xMax = (map.baseY - b) / a;
            return (map.baseX - xMax > 0 && map.baseX - xMax <  5000) || (map.baseY - yMax > 0 && map.baseY - yMax <  5000);
        }
    }

    @Override
    public String toString() {
        return "Entity[type=" + type + ",x=" + x + ",y=" + y + ",vx=" + vx + ",vy" + vy + "]";
    }
}


class Hero {
    public Entity entity;
    public Entity target;
    public Point2D targetPoint;
    public Point2D patrolPoint;
    public Role role;
    public Strategy strategy;
    public Patrol patrol;
    public Action action;

    public Hero(Entity entity, Role role, GameMap map) {
        this.entity = entity;
        this.role = role;
        if (role == Role.DEFENDER) {
            this.patrol = map.basePatrol;
        } else {
            this.patrol = map.farmPatrol;
        }
        this.strategy = new ModifiablePatrolStrategy(map, role);
    }
    public void printMove() {
        // In the first league: MOVE <x> <y> | WAIT; In later leagues: | SPELL <spellParams>;
        if (target != null || patrolPoint != null) {
            System.out.println("MOVE " + (int) targetPoint.x + " " + (int) targetPoint.y + " " + role + "_" + entity.id + " " + action);
        } else {
            System.out.println("WAIT " + entity.id);
        }
    }

    @Override
    public String toString() {
        return "Hero[id=" + entity.id + ",x=" + entity.x + ",y=" + entity.y +  "]";
    }


    public void target(Entity monster) {
        action = Action.ATK;
        target = monster;
    }

    public void patrol() {
        action = Action.PAT;
        target = null;

    }
    public void reset() {
        targetPoint = null;
        target = null;
    }

    public boolean isAssigned() {
        return target != null;
    }
    public void updateTargetPoint() {
        if (action == Action.ATK) {
            targetPoint = Utils.calculateInterceptionPoint(this.entity, target);
        } else if (action == Action.PAT) {
            if (patrolPoint == null || Utils.distance(entity.getPosition(), patrol.point1) < 1600) {
                patrolPoint = patrol.point2;
            } else if (Utils.distance(entity.getPosition(), patrol.point2) < 1600) {
                patrolPoint = patrol.point1;
            }
            targetPoint = patrolPoint;
        }
    }

}


class GameMap {
    int maxX=17630;
    int maxY=9000; 

    // The corner of the map representing your base
    public Point2D base;
    public int baseX;
    public int baseY;
    public Patrol farmPatrol;
    public Patrol basePatrol;

    public GameMap(int x, int y) {
        this.baseX = x;
        this.baseY = y;
        this.base = new Point2D(x, y);
        farmPatrol = new Patrol();
        basePatrol = new Patrol();
        if (baseX == 0) {
            farmPatrol.point1 = new Point2D(2000, 6000);
            farmPatrol.point2 = new Point2D(6000, 2000);
            basePatrol.point1 = new Point2D(1500, 3000);
            basePatrol.point2 = new Point2D(3000, 1500);
        } else {
            farmPatrol.point1 = new Point2D(baseX - 2000 , baseY - 6000);
            farmPatrol.point2 = new Point2D(baseX - 6000 , baseY - 2000);
            basePatrol.point1 = new Point2D(baseX - 1500 , baseY - 3000);
            basePatrol.point2 = new Point2D(baseX - 3000 , baseY - 1500);
        }

    }

    @Override
    public String toString() {
        return "GameMap[baseX=" + baseX + ", baseY=" + baseY + "]";
    }   
}

class GamePlayer {
    public int health;  // Each player's base health
    public int mana; // Ignore in the first league; Spend ten mana to cast a spell
}



class GameState {

    public GameMap map;
    public int heroesPerPlayer; // Always 3
    public GamePlayer me;
    public GamePlayer opponent;
    public Map<Integer, Entity> entityMap = new HashMap<>();
    public Hero[] myHeroes = new Hero[3];
    public int turn = 0;
    public StrategicInfo strategicInfo = new StrategicInfo();

    public void initState(Scanner in) {
        map = new GameMap(in.nextInt(),in.nextInt());   
        heroesPerPlayer = in.nextInt();
        me = new GamePlayer();
        opponent = new GamePlayer();

    }

    public void newTurn(Scanner in) {
        turn++;
        // players data
        me.health = in.nextInt();
        me.mana = in.nextInt(); 
        opponent.health = in.nextInt();
        opponent.mana = in.nextInt();

        int entityCount = in.nextInt(); // Amount of heros and monsters you can see
        int myHeroesIndex = 0;
        for (int i = 0; i < entityCount; i++) {
            int id = in.nextInt(); // Unique identifier
            if (!entityMap.containsKey(id)) {
                entityMap.put(id, new Entity(id));
            }
            Entity currentEntity = entityMap.get(id);
            currentEntity.type = in.nextInt(); // 0=monster, 1=your hero, 2=opponent hero
            currentEntity.x = in.nextInt(); // Position of this entity
            currentEntity.y = in.nextInt();
            currentEntity.shieldLife = in.nextInt(); // Ignore for this league; Count down until shield spell fades
            currentEntity.isControlled = in.nextInt(); // Ignore for this league; Equals 1 when this entity is under a control spell
            currentEntity.health = in.nextInt(); // Remaining health of this monster
            currentEntity.vx = in.nextInt(); // Trajectory of this monster
            currentEntity.vy = in.nextInt();
            currentEntity.nearBase = in.nextInt(); // 0=monster with no target yet, 1=monster targeting a base
            currentEntity.threatFor = in.nextInt(); // Given this monster's trajectory, is it a threat to 1=your base, 2=your opponent's base, 0=neither
            currentEntity.lastSeenTurn = turn;
            if (currentEntity.isMyHero()) {
                if (myHeroes[myHeroesIndex] == null) {
                    myHeroes[myHeroesIndex++] = new Hero(currentEntity, Role.fromId(id), map);
                }
            }
            strategicInfo.computeTop3Threats(this);
        }


    }
    
}




/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {


    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // Initialization of game state
        long initStart = System.currentTimeMillis();
        
        GameState gameState = new GameState();
        gameState.initState(in);

        long initEnd = System.currentTimeMillis();
        System.err.println("Initialization duration: " + (initEnd-initStart));
        // game loop
        // MultiHeroStrategy strategy = new BasicMultiHeroStrategy();
        MultiHeroStrategy strategy = new EliminateThreatsStrategy();
        while (true) {
            long start = System.currentTimeMillis();
            gameState.newTurn(in);
           
            strategy.computeMoves(gameState);
            
            for (int i = 0; i < gameState.heroesPerPlayer; i++) {
                gameState.myHeroes[i].printMove();
            }
            
            long end = System.currentTimeMillis();
            System.err.println(end-start);
        }
    }


}



class StrategicInfo {

    public List<Entity> top3Threats;

    public void computeTop3Threats(GameState gameState) {
        top3Threats = gameState.entityMap.values().stream()
        .filter( entity -> entity.isMonster() && entity.isAlive(gameState.turn))
        .sorted(new Comparator<Entity>() {
            @Override
            public int compare(Entity arg0, Entity arg1) {
                if (arg0.isBaseThreat(gameState.map) && !arg1.isBaseThreat(gameState.map)) {
                    return 1;
                } else if (!arg0.isBaseThreat(gameState.map) && arg1.isBaseThreat(gameState.map)) {
                    return -1;
                }
                return (int) (Utils.distance(arg0.getPosition(), gameState.map.base) - Utils.distance(arg1.getPosition(), gameState.map.base));
            }
            
        })
        .limit(3)
        .collect(Collectors.toList());
    }

}


class BasicMultiHeroStrategy implements MultiHeroStrategy {

    @Override
    public void computeMoves(GameState gameState) {
        for (int i = 0; i < gameState.heroesPerPlayer; i++) {
            Hero currentHero = gameState.myHeroes[i];
            System.err.println(currentHero);
            currentHero.strategy.computeMove(currentHero, gameState);
                
        }
    }
    

}


class BasicStrategy implements Strategy {

    public void computeMove(Hero currentHero, GameState gameState) {
        double selectedDistance = 999999999;
        Entity selectedMonster = null;
        Point2D selectedInterceptionPoint = null;
        double selectedDistanceBaseThreat = 999999999;
        Entity selectedMonsterBaseThreat = null;
        Point2D selectedInterceptionPointBaseThreat = null;
        
        // hastarget
        if (currentHero.target != null
        && currentHero.target.isAlive(gameState.turn)
        && Utils.distance(currentHero.entity, currentHero.target) < 1600) {

            currentHero.targetPoint = Utils.calculateInterceptionPoint(currentHero.entity, currentHero.target);


        } else {
            if (currentHero.target != null) {
                currentHero.target.isTargeted = false;
                currentHero.target = null;
            }
            for (Entity target : gameState.entityMap.values()) {
                if (target.isMonster() && target.isAlive(gameState.turn) && !target.isTargeted) {
                    System.err.println(target);
                    Point2D interceptionPoint = Utils.calculateInterceptionPoint(currentHero.entity, target);
                    System.err.println(interceptionPoint);

                    double currDist = Utils.distance(currentHero.entity.getPosition(), interceptionPoint);
                    if (currDist < selectedDistance ) {
                        selectedDistance = currDist;
                        selectedMonster = target;
                        selectedInterceptionPoint = interceptionPoint;
                    }
                    if (currDist < selectedDistanceBaseThreat && target.isBaseThreat(gameState.map)) {
                        selectedDistanceBaseThreat = currDist;
                        selectedMonsterBaseThreat = target;
                        selectedInterceptionPointBaseThreat = interceptionPoint;
                    }
                }

            }
            if (selectedMonsterBaseThreat != null) {
                currentHero.target = selectedMonsterBaseThreat;
                currentHero.targetPoint = selectedInterceptionPointBaseThreat;
                selectedMonsterBaseThreat.isTargeted = true;
            } else if (selectedMonster != null) {
                currentHero.target = selectedMonster;
                currentHero.targetPoint = selectedInterceptionPoint;
                selectedMonster.isTargeted = true;
            }
        }
        // Write an action using System.out.println()
        // To debug: System.err.println("Debug messages...");
        if (currentHero.target == null ) {
            if (currentHero.patrolPoint == null || Utils.distance(currentHero.entity.getPosition(), gameState.map.farmPatrol.point1) < 1600) {
                currentHero.patrolPoint = gameState.map.farmPatrol.point2;
            } else if (Utils.distance(currentHero.entity.getPosition(), gameState.map.farmPatrol.point2) < 1600) {
                currentHero.patrolPoint = gameState.map.farmPatrol.point1;
            }
            currentHero.targetPoint = currentHero.patrolPoint;
        }
    }
    
}



class EliminateThreatsStrategy implements MultiHeroStrategy {

    public void computeMoves(GameState gameState) {
        Hero[] heroes = gameState.myHeroes;


        
        for (int i=0; i<=2 ; i++) {
            if (heroes[i].action == Action.ATK && !heroes[i].target.isAlive(gameState.turn)) {
                heroes[i].reset();
                System.err.println("Reset Hero:" + heroes[i]);
            }
        }
        for (Entity monster : gameState.strategicInfo.top3Threats) {
            System.err.println("threat: " + monster);
            Hero selectedHero = null;
            Double distance = Double.MAX_VALUE;
            for (int i=0; i<=2 ; i++) {
                Hero hero = heroes[i];
                if (!heroes[i].isAssigned()) {
                    Point2D interceptionPoint = Utils.calculateInterceptionPoint(heroes[i].entity, monster);
                    Double distanceTmp = Utils.distance(heroes[i].entity.getPosition(), interceptionPoint);
                    System.err.println("distance:" + distanceTmp + " for " + hero);
                    if (distanceTmp < distance) {
                        distance = distanceTmp;
                        selectedHero = heroes[i];
                    }
                }
            }
            if (selectedHero != null) {
                selectedHero.target(monster);
            }
        }
        for (int i=0; i<=2 ; i++) {
            if (!heroes[i].isAssigned()) {
                heroes[i].patrol();
            }
            heroes[i].updateTargetPoint();
        }
    }

}


class ModifiablePatrolStrategy implements Strategy {
    
    Patrol patrol;

    public ModifiablePatrolStrategy(GameMap map, Role role) {
        if (role == Role.DEFENDER) {
            patrol = map.basePatrol;
        } else {
            patrol = map.farmPatrol;
        }
    }

    public void computeMove(Hero currentHero, GameState gameState) {
        double selectedDistance = 999999999;
        Entity selectedMonster = null;
        Point2D selectedInterceptionPoint = null;
        double selectedDistanceBaseThreat = 999999999;
        Entity selectedMonsterBaseThreat = null;
        Point2D selectedInterceptionPointBaseThreat = null;
        
        // hastarget
        if (currentHero.target != null
        && currentHero.target.isAlive(gameState.turn)
        && Utils.distance(currentHero.entity, currentHero.target) < 1600) {

            currentHero.targetPoint = Utils.calculateInterceptionPoint(currentHero.entity, currentHero.target);


        } else {
            if (currentHero.target != null) {
                currentHero.target.isTargeted = false;
                currentHero.target = null;
            }
            for (Entity target : gameState.entityMap.values()) {
                if (target.isMonster() && target.isAlive(gameState.turn) && !target.isTargeted) {
                    System.err.println(target);
                    Point2D interceptionPoint = Utils.calculateInterceptionPoint(currentHero.entity, target);
                    System.err.println(interceptionPoint);

                    double currDist = Utils.distance(currentHero.entity.getPosition(), interceptionPoint);
                    if (currDist < selectedDistance ) {
                        selectedDistance = currDist;
                        selectedMonster = target;
                        selectedInterceptionPoint = interceptionPoint;
                    }
                    if (currDist < selectedDistanceBaseThreat && target.isBaseThreat(gameState.map)) {
                        selectedDistanceBaseThreat = currDist;
                        selectedMonsterBaseThreat = target;
                        selectedInterceptionPointBaseThreat = interceptionPoint;
                    }
                }

            }
            if (selectedMonsterBaseThreat != null) {
                currentHero.target = selectedMonsterBaseThreat;
                currentHero.targetPoint = selectedInterceptionPointBaseThreat;
                selectedMonsterBaseThreat.isTargeted = true;
            } else if (selectedMonster != null) {
                currentHero.target = selectedMonster;
                currentHero.targetPoint = selectedInterceptionPoint;
                selectedMonster.isTargeted = true;
            }
        }
        // Write an action using System.out.println()
        // To debug: System.err.println("Debug messages...");
        if (currentHero.target == null ) {
            if (currentHero.patrolPoint == null || Utils.distance(currentHero.entity.getPosition(), patrol.point1) < 1000) {
                currentHero.patrolPoint = patrol.point2;
            } else if (Utils.distance(currentHero.entity.getPosition(), patrol.point2) < 1000) {
                currentHero.patrolPoint = patrol.point1;
            }
            currentHero.targetPoint = currentHero.patrolPoint;
        }
    }
}


interface MultiHeroStrategy {

    void computeMoves(GameState gameState);

    


}


class Patrol {
    public Point2D point1;
    public Point2D point2;
}

enum Role {
    FARMER,
    ATTACKER,
    DEFENDER;

    public static Role fromId(int id) {
        return id == 1 ? DEFENDER : FARMER;
    }
    
}


interface Strategy {

    void computeMove(Hero currentHero, GameState gameState);

}

class Point2D {
    public double x;
    public double y;

    public Point2D(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }

    @Override
    public String toString() {
        return "Point[x=" + x +" ,y=" + y +"]";
    }
}


class Utils {

    public static Double fastSqrt(int d) {
        return Double.longBitsToDouble( ( ( Double.doubleToLongBits( Double.valueOf(d) )-(1l<<52) )>>1 ) + ( 1l<<61 ) );
    }

    public static Double fastSqrt(double d) {
        return Double.longBitsToDouble( ( ( Double.doubleToLongBits( d )-(1l<<52) )>>1 ) + ( 1l<<61 ) );
    }

    
    public static int sqpow(int val) {
        return val * val;
    }

    public static double sqpow(double val) {
        return val * val;
    }


    public static Double distance(Entity entity1, Entity entity2) {
        return Utils.fastSqrt(sqpow(entity2.x - entity1.x) + sqpow(entity2.y - entity1.y));
    }

    public static Double distance(Point2D entity1, Point2D entity2) {
        return Utils.fastSqrt(sqpow(entity2.x - entity1.x) + sqpow(entity2.y - entity1.y));
    }

    public static Point2D calculateInterceptionPoint(Entity hero, Entity monster) {
        return calculateInterceptionPoint(monster.getPosition(), monster.getSpeedVector(), hero.getPosition(), hero.getSpeed());
    }

    public static Point2D calculateInterceptionPoint(final Point2D a, final Point2D v, final Point2D b, final double s) {
		final double ox = a.getX() - b.getX();
		final double oy = a.getY() - b.getY();
 
		final double h1 = v.getX() * v.getX() + v.getY() * v.getY() - s * s;
		final double h2 = ox * v.getX() + oy * v.getY();
		double t;
		if (h1 == 0) { // problem collapses into a simple linear equation 
			t = -(ox * ox + oy * oy) / (2*h2);
		} else { // solve the quadratic equation
			final double minusPHalf = -h2 / h1;
 
			final double discriminant = minusPHalf * minusPHalf - (ox * ox + oy * oy) / h1; // term in brackets is h3
			if (discriminant < 0) { // no (real) solution then...
				return null;
			}
 
			final double root = Math.sqrt(discriminant);
 
			final double t1 = minusPHalf + root;
			final double t2 = minusPHalf - root;
 
			final double tMin = Math.min(t1, t2);
			final double tMax = Math.max(t1, t2);
 
			t = tMin > 0 ? tMin : tMax; // get the smaller of the two times, unless it's negative
			if (t < 0) { // we don't want a solution in the past
				return null;
			}
		}
 
		// calculate the point of interception using the found intercept time and return it
		return new Point2D(a.getX() + t * v.getX(), a.getY() + t * v.getY());
	}

}
